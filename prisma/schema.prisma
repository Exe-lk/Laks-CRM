generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model LocumProfile {
  id                      String      @id @default(cuid())
  fullName                String
  address                 String
  dateOfBirth             DateTime    @map("dob")
  emailAddress            String      @unique @map("email_address")
  contactNumber           String      @unique @map("contact_number")
  gdcNumber               String?      @map("gdc_number")
  location                String
  employeeType            String      @map("employee_type")
  software                String?
  gdcImage                String?     @map("gdc_image")
  indemnityInsuranceImage String?     @map("indemnity_insurance_image")
  hepatitisBImage         String?     @map("hepatitis_b_image")
  dbsImage                String?     @map("dbs_image")
  referenceletter1        String?      @map("reference_number1")
  referenceletter2        String?      @map("reference_number2")
  bankDetails             String?
  shareCode               String?
  NIUTRnumber            String?
  cv                      String?
  status                  String?
  role                    String?
  idImage                 String?     @map("id_image")
  createdAt               DateTime    @default(now()) @map("created_at")
  updatedAt               DateTime    @updatedAt @map("updated_at")
  specialties             Specialty[]
  bookings                Booking[]

  @@map("locum_profiles")
}

model Specialty {
  id            String       @id @default(cuid())
  locumId       String       @map("locum_id")
  numberOfYears Int          @map("number_of_years")
  speciality    Int
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @updatedAt @map("updated_at")
  locumProfile  LocumProfile @relation(fields: [locumId], references: [id], onDelete: Cascade)

  @@map("specialties")
}

model Practice {
  id         String   @id @default(cuid())
  name       String
  telephone  String   @unique
  email      String   @unique
  dob        DateTime
  GDCnumber  String
  address    String?
  location   String?
  status     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  bookings   Booking[]

  @@map("practices")
}

model Booking {
  booking_id    String        @id @default(cuid())
  locum_id      String
  practice_id   String
  booking_date  DateTime
  booking_time  String
  status        String
  location      String
  description   String?
  accept_time   DateTime?
  cancel_by     String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  locumProfile  LocumProfile  @relation(fields: [locum_id], references: [id], onDelete: Cascade)
  practice      Practice      @relation(fields: [practice_id], references: [id], onDelete: Cascade)
}
