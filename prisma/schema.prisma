generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model LocumProfile {
  id                      String      @id @default(cuid())
  fullName                String
  address                 String
  dateOfBirth             DateTime    @map("dob")
  emailAddress            String      @unique @map("email_address")
  contactNumber           String      @unique @map("contact_number")
  gdcNumber               String?      @map("gdc_number")
  location                String
  employeeType            String      @map("employee_type")
  software                String?
  gdcImage                String?     @map("gdc_image")
  indemnityInsuranceImage String?     @map("indemnity_insurance_image")
  hepatitisBImage         String?     @map("hepatitis_b_image")
  dbsImage                String?     @map("dbs_image")
  referenceletter1        String?     @map("referenceletter1")
  referenceletter2        String?     @map("referenceletter2")
  bankDetails             String?
  shareCode               String?
  NIUTRnumber            String?
  cv                      String?
  status                  String?
  role                    String?
  ratings                 Json?
  averageRating           Float?      
  hourlyPayRate           Float?
  totalRatings            Int?              
  idImage                 String?     @map("id_image")
  createdAt               DateTime    @default(now()) @map("created_at")
  updatedAt               DateTime    @updatedAt @map("updated_at")
  specialties             Specialty[]
  bookings                Booking[]
  appointmentResponses    AppointmentResponse[]
  appointmentConfirmations AppointmentConfirmation[]
  timesheets              Timesheet[]

  @@map("locum_profiles")
}

model Specialty {
  id            String       @id @default(cuid())
  locumId       String       @map("locum_id")
  numberOfYears Int          @map("number_of_years")
  speciality    Int
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @updatedAt @map("updated_at")
  locumProfile  LocumProfile @relation(fields: [locumId], references: [id], onDelete: Cascade)

  @@map("specialties")
}

model Practice {
  id           String   @id @default(cuid())
  name         String
  telephone    String   @unique
  email        String   @unique
  dob          DateTime
  GDCnumber    String
  address      String?
  location     String?
  status       String
  practiceType String   @default("Private") // Private or Corporate
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  bookings     Booking[]
  appointmentRequests AppointmentRequest[]
  branches     Branch[]
  paymentCards PaymentCard[]
  stripeCustomer StripeCustomer?
  timesheetJobs TimesheetJob[]

  @@map("practices")
}

model Booking {
  id            String      @id @default(cuid())
  request_id    String        @unique
  locum_id      String?
  practice_id   String
  booking_date  DateTime
  booking_start_time  String
  booking_end_time    String
  bookingUniqueid String 
  status        String
  location      String
  description   String?
  accept_time   DateTime?
  cancel_by     String?
  cancel_time   DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  request       AppointmentRequest @relation(fields: [request_id], references: [request_id], onDelete: Cascade)

  locumProfile  LocumProfile?  @relation(fields: [locum_id], references: [id], onDelete: Cascade)
  practice      Practice      @relation(fields: [practice_id], references: [id], onDelete: Cascade)
  timesheetJobs TimesheetJob[]
}

model AppointmentRequest {
  request_id              String      @id @default(cuid())
  practice_id             String
  request_date            DateTime
  request_start_time      String
  request_end_time        String
  location                String
  address                 String      // Address for the appointment location
  required_role           String      // Role required for this appointment (e.g., "Nurse", "Hygienist")
  status                  String      @default("PENDING") // PENDING, CONFIRMED, CANCELLED
  createdAt               DateTime    @default(now())
  updatedAt               DateTime    @updatedAt
  
  practice                Practice    @relation(fields: [practice_id], references: [id], onDelete: Cascade)
  responses               AppointmentResponse[]
  confirmations           AppointmentConfirmation[]
  booking                 Booking?

  @@map("appointment_requests")
}

model AppointmentResponse {
  response_id       String              @id @default(cuid())
  request_id        String
  locum_id          String
  status            String              // ACCEPTED, REJECTED
  responded_at      DateTime            @default(now())
  
  request           AppointmentRequest  @relation(fields: [request_id], references: [request_id], onDelete: Cascade)
  locumProfile      LocumProfile        @relation(fields: [locum_id], references: [id], onDelete: Cascade)
  
  @@unique([request_id, locum_id], name: "request_locum_unique")
  @@map("appointment_responses")
}

model AppointmentConfirmation {
  confirmation_id         String              @id @default(cuid())
  request_id              String
  chosen_locum_id         String
  practice_confirmed_at   DateTime            @default(now())
  locum_confirmed_at      DateTime?
  expires_at              DateTime?    
  status                  String              @default("PRACTICE_CONFIRMED") // PRACTICE_CONFIRMED, LOCUM_CONFIRMED, LOCUM_REJECTED
  rejection_reason        String?
  confirmation_number     Int
  createdAt               DateTime            @default(now())
  updatedAt               DateTime            @updatedAt
  
  request                 AppointmentRequest  @relation(fields: [request_id], references: [request_id], onDelete: Cascade)
  chosenLocum             LocumProfile        @relation(fields: [chosen_locum_id], references: [id], onDelete: Cascade)
  
 
  @@map("appointment_confirmations")
}

model Branch {
  id          String   @id @default(cuid())
  name        String
  address     String
  location    String
  telephone   String?
  email       String?  @unique
  password    String?
  practiceId  String   @map("practice_id")
  status      String   @default("active") // active, inactive
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  practice    Practice @relation(fields: [practiceId], references: [id], onDelete: Cascade)
  timesheetJobs TimesheetJob[]
  
  @@map("branches")
}

model PaymentCard {
  id              String   @id @default(cuid())
  practiceId      String   @map("practice_id")
  cardHolderName  String   @map("card_holder_name")
  cardNumber      String   @map("card_number") // Encrypted
  lastFourDigits  String   @map("last_four_digits") // For display purposes
  expiryMonth     String   @map("expiry_month") // Encrypted
  expiryYear      String   @map("expiry_year") // Encrypted
  cvv             String   // Encrypted
  cardType        String   @map("card_type") // VISA, MASTERCARD, AMEX, DISCOVER, etc.
  isDefault       Boolean  @default(false) @map("is_default")
  status          String   @default("active") // active, inactive
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  practice        Practice @relation(fields: [practiceId], references: [id], onDelete: Cascade)
  
  @@map("payment_cards")
}

model StripeCustomer {
  id                String   @id @default(cuid())
  practiceId        String   @unique @map("practice_id")
  stripeCustomerId  String   @unique @map("stripe_customer_id")
  email             String
  name              String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  practice          Practice @relation(fields: [practiceId], references: [id], onDelete: Cascade)
  
  @@map("stripe_customers")
}

model Timesheet {
  id                    String   @id @default(cuid())
  locumId               String   @map("locum_id")
  month                 Int      // 1-12
  year                  Int      // e.g., 2024
  status                String   @default("DRAFT") // DRAFT, SUBMITTED, APPROVED, LOCKED
  totalHours            Float?   @map("total_hours")
  totalPay              Float?   @map("total_pay")
  staffSignature        String?  @map("staff_signature") // Base64 encoded signature
  staffSignatureDate    DateTime? @map("staff_signature_date")
  managerSignature      String?  @map("manager_signature") // Base64 encoded signature
  managerSignatureDate  DateTime? @map("manager_signature_date")
  managerId             String?  @map("manager_id") // ID of the practice manager who approved
  submittedAt           DateTime? @map("submitted_at")
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  locumProfile          LocumProfile @relation(fields: [locumId], references: [id], onDelete: Cascade)
  timesheetJobs         TimesheetJob[]
  
  @@unique([locumId, month, year], name: "locum_month_year_unique")
  @@map("timesheets")
}

model TimesheetJob {
  id                    String   @id @default(cuid())
  timesheetId           String   @map("timesheet_id")
  bookingId             String   @map("booking_id") // Reference to the booking
  practiceId            String   @map("practice_id")
  branchId              String?  @map("branch_id") // Optional for corporate practices
  jobDate               DateTime @map("job_date")
  startTime             DateTime? @map("start_time")
  endTime               DateTime? @map("end_time")
  lunchStartTime        DateTime? @map("lunch_start_time")
  lunchEndTime          DateTime? @map("lunch_end_time")
  totalHours            Float?   @map("total_hours")
  hourlyRate            Float?   @map("hourly_rate")
  totalPay              Float?   @map("total_pay")
  notes                 String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  timesheet             Timesheet @relation(fields: [timesheetId], references: [id], onDelete: Cascade)
  booking               Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  practice              Practice @relation(fields: [practiceId], references: [id], onDelete: Cascade)
  branch                Branch? @relation(fields: [branchId], references: [id], onDelete: Cascade)
  
  @@map("timesheet_jobs")
}


