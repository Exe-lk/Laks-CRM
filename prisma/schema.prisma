generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model LocumProfile {
  id                      String      @id @default(cuid())
  fullName                String
  address                 String
  dateOfBirth             DateTime    @map("dob")
  emailAddress            String      @unique @map("email_address")
  contactNumber           String      @unique @map("contact_number")
  gdcNumber               String?      @map("gdc_number")
  location                String
  employeeType            String      @map("employee_type")
  software                String?
  gdcImage                String?     @map("gdc_image")
  indemnityInsuranceImage String?     @map("indemnity_insurance_image")
  hepatitisBImage         String?     @map("hepatitis_b_image")
  dbsImage                String?     @map("dbs_image")
  referenceletter1        String?      @map("referenceletter1")
  referenceletter2        String?      @map("referenceletter2")
  bankDetails             String?
  shareCode               String?
  NIUTRnumber            String?
  cv                      String?
  status                  String?
  role                    String?
  idImage                 String?     @map("id_image")
  createdAt               DateTime    @default(now()) @map("created_at")
  updatedAt               DateTime    @updatedAt @map("updated_at")
  specialties             Specialty[]
  bookings                Booking[]
  appointmentResponses    AppointmentResponse[]
  appointmentConfirmations AppointmentConfirmation[]

  @@map("locum_profiles")
}

model Specialty {
  id            String       @id @default(cuid())
  locumId       String       @map("locum_id")
  numberOfYears Int          @map("number_of_years")
  speciality    Int
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @updatedAt @map("updated_at")
  locumProfile  LocumProfile @relation(fields: [locumId], references: [id], onDelete: Cascade)

  @@map("specialties")
}

model Practice {
  id         String   @id @default(cuid())
  name       String
  telephone  String   @unique
  email      String   @unique
  dob        DateTime
  GDCnumber  String
  address    String?
  location   String?
  status     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  bookings   Booking[]
  appointmentRequests AppointmentRequest[]

  @@map("practices")
}

model Booking {
  booking_id    String        @id @default(cuid())
  request_id          String        @unique
  locum_id      String?
  practice_id   String
  booking_date  DateTime
  booking_start_time  String
  booking_end_time    String
  status        String
  location      String
  description   String?
  accept_time   DateTime?
  cancel_by     String?
  cancel_time   DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  request             AppointmentRequest @relation(fields: [request_id], references: [request_id], onDelete: Cascade)

  locumProfile  LocumProfile?  @relation(fields: [locum_id], references: [id], onDelete: Cascade)
  practice      Practice      @relation(fields: [practice_id], references: [id], onDelete: Cascade)
}

model AppointmentRequest {
  request_id              String      @id @default(cuid())
  practice_id             String
  request_date            DateTime
  request_start_time      String
  request_end_time        String
  location                String
  status                  String      @default("PENDING") // PENDING, CONFIRMED, CANCELLED
  createdAt               DateTime    @default(now())
  updatedAt               DateTime    @updatedAt
  
  practice                Practice    @relation(fields: [practice_id], references: [id], onDelete: Cascade)
  responses               AppointmentResponse[]
  confirmations           AppointmentConfirmation[]
  booking                 Booking?

  @@map("appointment_requests")
}

model AppointmentResponse {
  response_id       String              @id @default(cuid())
  request_id        String
  locum_id          String
  status            String              // ACCEPTED, REJECTED
  response_message  String?
  responded_at      DateTime            @default(now())
  
  request           AppointmentRequest  @relation(fields: [request_id], references: [request_id], onDelete: Cascade)
  locumProfile      LocumProfile        @relation(fields: [locum_id], references: [id], onDelete: Cascade)
  
  @@unique([request_id, locum_id])
  @@map("appointment_responses")
}

model AppointmentConfirmation {
  confirmation_id         String              @id @default(cuid())
  request_id              String
  chosen_locum_id         String
  practice_confirmed_at   DateTime            @default(now())
  locum_confirmed_at      DateTime?
  status                  String              @default("PRACTICE_CONFIRMED") // PRACTICE_CONFIRMED, LOCUM_CONFIRMED, LOCUM_REJECTED
  rejection_reason        String?
  confirmation_number     Int
  createdAt               DateTime            @default(now())
  updatedAt               DateTime            @updatedAt
  
  request                 AppointmentRequest  @relation(fields: [request_id], references: [request_id], onDelete: Cascade)
  chosenLocum             LocumProfile        @relation(fields: [chosen_locum_id], references: [id], onDelete: Cascade)
  
 
  @@map("appointment_confirmations")
}
